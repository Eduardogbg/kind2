BBT.got
: ∀(K: *)
  ∀(V: *)
  ∀(cmp: ∀(a: K) ∀(b: K) Cmp)
  ∀(key: K)
  ∀(map: (BBT K V))
  (Pair (Maybe V) (BBT K V))
= λK λV λcmp λkey λmap
  use P = λx (Pair (Maybe V) (BBT K V))
  use bin = λsize λnext.key λnext.val λnext.lft λnext.rgt
    use P = λx
      ∀(cmp: ∀(a: K) ∀(b: K) Cmp) ∀(key: K)
      (Pair (Maybe V) (BBT K V))
    use ltn = λcmp λkey
      use new_pair = (BBT.got K V cmp key next.lft)
      use P = λx (Pair (Maybe V) (BBT K V))
      use new = λval λlft
        use map = (BBT.bin K V size next.key next.val lft next.rgt)
        (Pair.new (Maybe V) (BBT K V) val map)
      (~new_pair P new)
    use eql = λcmp λkey
      use map = (BBT.bin K V size next.key next.val next.lft next.rgt)
      (Pair.new
        (Maybe V)
        (BBT K V)
        (Maybe.some V next.val)
        map
      )
    use gtn = λcmp λkey
      use new_pair = (BBT.got K V cmp key next.rgt)
      use P = λx (Pair (Maybe V) (BBT K V))
      use new = λval λrgt
        use map = (BBT.bin K V size next.key next.val next.lft rgt)
        (Pair.new (Maybe V) (BBT K V) val map)
      (~new_pair P new)
    (~(cmp key next.key) P ltn eql gtn cmp key)
  use tip = (Pair.new
      (Maybe V)
      (BBT K V)
      (Maybe.none V)
      (BBT.tip K V)
    )
  (~map P bin tip)